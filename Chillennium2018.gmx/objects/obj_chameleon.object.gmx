<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chameleon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
image_angle = 0
insect = noone

type = obj_swarm_grass
hit = false
healthiness = 3
fired = false
can_fire = true
aim_angle = 180
fire_angle = 180
target_angle = 180
var tongue_x = x
var eye_x = x

aim_angle_min = 135
aim_angle_max = 240
aim_angle_min_buffer = 85
aim_angle_max_buffer = 275
if x &gt; room_width / 2 {
    gamepad = global.player2;
    image_xscale = -1;
    x -= sprite_get_xoffset(sprite_index);
    tongue_x = x;
    eye_x = x;
} else {
    gamepad = global.player1;
    aim_angle = 180 - aim_angle
    fire_angle = 180 - fire_angle
    target_angle = 180 - target_angle
    aim_angle_min = 180 - aim_angle_min
    aim_angle_max = 540 - aim_angle_max
    aim_angle_min_buffer = 180 - aim_angle_min
    aim_angle_max_buffer = 540 - aim_angle_max
    tongue_x += sprite_width
    eye_x += sprite_width
}
aim_deadzone = 0.5
fire_deadzone = 0.5
fire_speed = 50
target_lock_angle = 6.75
transition_speed = 0.05

var eye_offset_x = 60;
var eye_offset_y = -12;
if(gamepad == global.player2) {
    eye_offset_x *= -1;
}
eye_dir = point_direction(x, y, x + eye_offset_x, y + eye_offset_y);
eye_dist = point_distance(x, y, x + eye_offset_x, y + eye_offset_y);

head = instance_create(x, y, obj_head);
tongue = instance_create(tongue_x, y, obj_tongue)
eye = instance_create(eye_x, y, obj_eye)

if(gamepad == global.player2) {
    head.image_yscale = -1;
    head.image_angle += 180;
}

eye.x += eye_offset_x;
eye.y += eye_offset_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// determine aim angle
var x_tilt = gamepad_axis_value(gamepad, gp_axislh)
var y_tilt = gamepad_axis_value(gamepad, gp_axislv)

if point_distance(0, 0, x_tilt, y_tilt) &gt; aim_deadzone {
    var new_angle = point_direction(0, 0, x_tilt, y_tilt)
    if(gamepad == global.player2) {
        if new_angle &gt; aim_angle_min and new_angle &lt; aim_angle_max {
            aim_angle = new_angle
        } else if new_angle &gt; aim_angle_min_buffer and new_angle &lt; aim_angle_max_buffer {
            aim_angle = scr_clamp_angle(new_angle, aim_angle_min, aim_angle_max)
        }
    } else {
        if new_angle &lt; aim_angle_min or new_angle &gt; aim_angle_max {
            aim_angle = new_angle
        } else if new_angle &lt; aim_angle_min_buffer or new_angle &gt; aim_angle_max_buffer {
            aim_angle = scr_clamp_angle(new_angle, aim_angle_min, aim_angle_max)
        }
    }
    
    if abs(angle_difference(aim_angle, target_angle)) &lt; target_lock_angle {
        aim_angle = target_angle
    }
}
eye.image_angle = aim_angle    

if not fired {
    tongue.direction = aim_angle
    tongue.image_angle = aim_angle
} else {
    // tongue collision
    // collision with insect
    if not hit {
        if not instance_exists(insect) {
            // valid hit occurred
            with tongue {
                other.insect = instance_place(x, y, obj_swarm)
            }
            if instance_exists(insect) {
                hit = true
                type = insect.object_index
                insect = noone
                
                switch type {
                case obj_swarm_grass:
                    audio_play_sound(snd_flowers, 10, false)
                    break
                case obj_swarm_water:
                    audio_play_sound(snd_splash, 10, false)
                    break
                case obj_swarm_fire:
                    audio_play_sound(snd_fire, 10, false)
                    break
                default:
                    break
                }
                
            }
        }
        
        // collision with enemy
        with tongue {
            if place_meeting(x, y, other.enemy.eye) {
                // determine if a valid hit occurred
                if scr_type_wins(other.type, other.enemy.type) {
                    other.enemy.healthiness--
                    other.hit = true
                    other.enemy.type = other.type
                    
                    audio_play_sound(snd_punch, 10, false)
                    
                    if other.enemy.healthiness &lt;= 0 {
                        global.winner = other.gamepad
                        room_goto(rm_final)
                    }
                }
            }
        }
    }
    

    // check tongue distance
    var distance = point_distance(tongue.start_x, tongue.start_y, tongue.x, tongue.y)
    with tongue {
        length = distance
    }
    if distance &gt; tongue.sprite_width {
        // return
        tongue.speed = -fire_speed
        tongue.length = tongue.sprite_width
    } else if abs(fire_angle - point_direction(tongue.start_x, tongue.start_y, tongue.x, tongue.y)) &gt; 0.1 {
        // stop
        tongue.speed = 0
        tongue.length = 0
        tongue.x = tongue.start_x
        tongue.y = tongue.start_y
        fired = false
        hit = false
        
        audio_play_sound(snd_tongue_in, 10, false)
        //if instance_exists(insect) {
        //    type = insect.object_index
        //    insect = noone
        //}
    }
}
            
switch type {
case obj_swarm_grass:
    image_index = 0
    head.sprite_index = spr_head_grass
    break
case obj_swarm_water:
    image_index = 1
    head.sprite_index = spr_head_water
    break
case obj_swarm_fire:
    image_index = 2
    head.sprite_index = spr_head_fire
    target_image_index = 0
    break
case obj_swarm_water:
    target_image_index = 1
    break
case obj_swarm_fire:
    target_image_index = 2
    break
default:
    break
}

if image_index != target_image_index {
    var transition_dir = sign(target_image_index - image_index)
    image_index = image_index - transition_dir * transition_speed
    var new_transition_dir = sign(target_image_index - image_index)
    if (transition_dir != new_transition_dir) {
        image_index = target_image_index
    }
}

// tongue fire
var trigger_val = gamepad_button_check(gamepad, gp_shoulderrb)
if trigger_val &gt; fire_deadzone {
    if can_fire and not fired {
        fired = true
        can_fire = false
        fire_angle = aim_angle
        tongue.speed = fire_speed
        head.image_angle = aim_angle;
        var new_eye_dir = head.image_angle + eye_dir;
        if(gamepad == global.player2) {
            new_eye_dir += 180;
        }
        var x_off = lengthdir_x(eye_dist, new_eye_dir);
        var y_off = lengthdir_y(eye_dist, new_eye_dir);
        eye.x = head.x + x_off;
        eye.y = head.y + y_off;
        
        audio_play_sound(snd_tongue_out, 10, false)
    }
} else {
    if fired {
        // return
        tongue.speed = -fire_speed
    }
    can_fire = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set reference
with obj_chameleon {
    if self.id != other.id {
        other.enemy = self
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_text(x, y - 100, string(healthiness))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
